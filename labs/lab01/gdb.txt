1. While you’re in a gdb session, how do you set the arguments that will be passed to the program when it’s run?
ANSWER:
   for gdb
   gdb --args <program name> <args list>
   for lldb
   lldb -- <program name> <args list>
2. How do you create a breakpoint?
ANSWER:
   for gdb
   break main
   break <filename>:<linenum>
   for lldb
   breakpoint set --name main
   breakpoint set --file <filename> --line <linenum>
3. How do you execute the next line of C code in the program after stopping at a breakpoint?
ANSWER:
   for gdb
   Do a source level single step in the currently selected thread.
   "step" or "s"
   Do a source level single step over in the currently selected thread.
   "next" or "n"
   for lldb
   Do a source level single step in the currently selected thread.
   "step" or "s"
   Do a source level single step over in the currently selected thread.
   "next" or "n"
4. If the next line of code is a function call, you’ll execute the whole function call at once if you use your answer to #3.
(If not, consider a different command for #3!) How do you tell GDB that you want to debug the code inside the function
(i.e. step into the function) instead? (If you changed your answer to #3, then that answer is most likely now applicable here.)
   for gdb
   Do a source level single step in the currently selected thread.
   "step" or "s"
   for lldb
   Do a source level single step in the currently selected thread.
   "step" or "s"
5. How do you continue the program after stopping at a breakpoint?
   for gdb
   "continue"
   for lldb
   "continue"
6. How can you print the value of a variable (or even an expression like 1+2) in gdb?
   for gdb
   "p [/f] expr"
   for lldb
   "p expr"
7. How do you configure gdb so it displays the value of a variable after every step?

8. How do you show a list of all variables and their values in the current function?

9. How do you quit out of gdb?
   for gdb
   "quit" or "q"
   for lldb
   "quit" or "q"